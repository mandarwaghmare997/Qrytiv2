name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  
  # Allow manual release creation
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'New release with improvements and bug fixes'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # Get the latest tag (previous release)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "🎉 This is the first release!"
            CHANGELOG="🎉 Initial release of Qrytiv2 Serverless Platform"
          else
            echo "📊 Changes since $PREVIOUS_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          fi
          
          # Save changelog to file
          echo "$CHANGELOG" > CHANGELOG.md
          
          # Set output for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## 🚀 Qrytiv2 Release ${{ steps.get_version.outputs.version }}
            
            ### 📋 What's New
            ${{ github.event.inputs.release_notes || 'New release with improvements and bug fixes' }}
            
            ### 📝 Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🏗️ Architecture
            - **Backend:** AWS Lambda + DynamoDB serverless architecture
            - **Frontend:** Optimized React application with Vite
            - **Deployment:** Automated CI/CD with GitHub Actions
            
            ### 📦 Assets
            - Frontend build artifacts
            - Serverless deployment package
            - Documentation and deployment guides
            
            ### 🔗 Quick Links
            - [Documentation](https://github.com/mandarwaghmare997/Qrytiv2#readme)
            - [Deployment Guide](https://github.com/mandarwaghmare997/Qrytiv2#deployment)
            - [API Documentation](https://github.com/mandarwaghmare997/Qrytiv2#api-documentation)
          draft: false
          prerelease: false

  # Build and package frontend
  build-frontend:
    name: Build Frontend Package
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-optimized/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend-optimized
        run: npm ci

      - name: Build production bundle
        working-directory: ./frontend-optimized
        env:
          NODE_ENV: production
        run: npm run build

      - name: Create frontend package
        working-directory: ./frontend-optimized
        run: |
          echo "📦 Creating frontend package..."
          
          # Create package info
          cat > dist/package-info.json << EOF
          {
            "name": "qrytiv2-frontend",
            "version": "${{ needs.create-release.outputs.version || github.ref_name }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "bundle_size": "$(du -sh dist/ | cut -f1)",
            "files": $(find dist/ -type f | wc -l)
          }
          EOF
          
          # Create deployment package
          tar -czf ../qrytiv2-frontend-${{ github.ref_name }}.tar.gz -C dist .
          
          echo "✅ Frontend package created"

      - name: Upload frontend package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./frontend-optimized/qrytiv2-frontend-${{ github.ref_name }}.tar.gz
          asset_name: qrytiv2-frontend-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # Build and package backend
  build-backend:
    name: Build Backend Package
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./serverless
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install -g serverless@3

      - name: Create backend package
        working-directory: ./serverless
        run: |
          echo "📦 Creating backend package..."
          
          # Create package info
          cat > package-info.json << EOF
          {
            "name": "qrytiv2-backend",
            "version": "${{ needs.create-release.outputs.version || github.ref_name }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "lambda_functions": $(find functions/ -name "*.py" | wc -l),
            "shared_modules": $(find shared/ -name "*.py" | wc -l)
          }
          EOF
          
          # Create deployment package (exclude node_modules and .serverless)
          tar -czf ../qrytiv2-backend-${{ github.ref_name }}.tar.gz \
            --exclude=node_modules \
            --exclude=.serverless \
            --exclude=__pycache__ \
            --exclude="*.pyc" \
            .
          
          echo "✅ Backend package created"

      - name: Upload backend package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./serverless/qrytiv2-backend-${{ github.ref_name }}.tar.gz
          asset_name: qrytiv2-backend-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # Create deployment documentation
  create-deployment-docs:
    name: Create Deployment Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate deployment documentation
        run: |
          echo "📚 Creating deployment documentation..."
          
          cat > DEPLOYMENT-${{ github.ref_name }}.md << 'EOF'
          # Qrytiv2 Deployment Guide - ${{ github.ref_name }}
          
          ## 🚀 Quick Deployment
          
          ### Prerequisites
          - AWS CLI configured with appropriate permissions
          - Node.js 20+ and npm
          - Python 3.9+
          - Serverless Framework v3
          
          ### Backend Deployment
          ```bash
          # Extract backend package
          tar -xzf qrytiv2-backend-${{ github.ref_name }}.tar.gz
          cd serverless/
          
          # Install dependencies
          npm install -g serverless@3
          pip install -r requirements.txt
          
          # Deploy to AWS
          export JWT_SECRET="your-secure-jwt-secret"
          export SENDER_EMAIL="your-email@domain.com"
          serverless deploy --stage prod
          ```
          
          ### Frontend Deployment
          ```bash
          # Extract frontend package
          tar -xzf qrytiv2-frontend-${{ github.ref_name }}.tar.gz
          
          # Deploy to S3
          aws s3 sync . s3://your-bucket-name --delete
          
          # Invalidate CloudFront (if using)
          aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"
          ```
          
          ### Environment Variables
          
          #### Backend (.env)
          ```
          JWT_SECRET=your-secure-jwt-secret-here
          SENDER_EMAIL=no-reply@yourdomain.com
          SENDER_NAME=Your App Name
          ```
          
          #### Frontend (.env)
          ```
          VITE_API_BASE_URL=https://your-api-gateway-url.amazonaws.com/prod
          VITE_ENVIRONMENT=production
          ```
          
          ### Post-Deployment Steps
          
          1. **Initialize Demo Data** (optional)
          ```bash
          cd serverless/
          python shared/init_demo_data.py
          ```
          
          2. **Test Deployment**
          ```bash
          # Test API health
          curl https://your-api-gateway-url.amazonaws.com/prod/api/v1/health
          
          # Test frontend
          curl https://your-frontend-domain.com
          ```
          
          3. **Configure DNS** (if using custom domain)
          - Point your domain to CloudFront distribution
          - Update SSL certificates if needed
          
          ### Monitoring and Maintenance
          
          - **CloudWatch Logs:** Monitor Lambda function logs
          - **DynamoDB Metrics:** Check read/write capacity usage
          - **CloudFront Analytics:** Monitor frontend performance
          - **Cost Monitoring:** Set up billing alerts
          
          ### Troubleshooting
          
          #### Common Issues
          1. **Lambda Cold Starts:** Increase memory allocation
          2. **DynamoDB Throttling:** Check capacity settings
          3. **CORS Errors:** Verify API Gateway CORS configuration
          4. **Authentication Issues:** Check JWT secret configuration
          
          #### Support
          - GitHub Issues: https://github.com/mandarwaghmare997/Qrytiv2/issues
          - Documentation: https://github.com/mandarwaghmare997/Qrytiv2#readme
          
          ---
          
          **Release:** ${{ github.ref_name }}  
          **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)  
          **Commit:** ${{ github.sha }}
          EOF

      - name: Upload deployment documentation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./DEPLOYMENT-${{ github.ref_name }}.md
          asset_name: DEPLOYMENT-${{ github.ref_name }}.md
          asset_content_type: text/markdown

  # Notify release completion
  notify-release:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [create-release, build-frontend, build-backend, create-deployment-docs]
    if: always()
    
    steps:
      - name: Release summary
        run: |
          echo "🎉 Release ${{ github.ref_name }} completed!"
          echo "=========================="
          
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ Release Created: SUCCESS"
          else
            echo "❌ Release Created: FAILED"
          fi
          
          if [ "${{ needs.build-frontend.result }}" == "success" ]; then
            echo "✅ Frontend Package: SUCCESS"
          else
            echo "❌ Frontend Package: FAILED"
          fi
          
          if [ "${{ needs.build-backend.result }}" == "success" ]; then
            echo "✅ Backend Package: SUCCESS"
          else
            echo "❌ Backend Package: FAILED"
          fi
          
          if [ "${{ needs.create-deployment-docs.result }}" == "success" ]; then
            echo "✅ Documentation: SUCCESS"
          else
            echo "❌ Documentation: FAILED"
          fi
          
          echo "=========================="
          echo "🔗 Release URL: https://github.com/mandarwaghmare997/Qrytiv2/releases/tag/${{ github.ref_name }}"
          echo "📦 Assets available for download"
          echo "📚 Deployment documentation included"

