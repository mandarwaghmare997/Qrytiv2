name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install -g pnpm
        pnpm install
        
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f backend/requirements.txt ]; then
          pip install -r backend/requirements.txt
        fi
        
    - name: Lint frontend code
      run: |
        cd frontend
        # Add ESLint when configured
        echo "Frontend linting would run here"
        
    - name: Lint backend code
      run: |
        # Check for syntax errors and undefined names
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check for complexity and style issues
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting
      run: |
        # Check if Python code is formatted with black
        black --check backend/ || echo "Code formatting issues found"
        # Check import sorting
        isort --check-only backend/ || echo "Import sorting issues found"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "üîí Running security scans"
        # Add security scanning tools here
        # Example: npm audit, safety check for Python, etc.
        echo "Security scan completed"

  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test frontend build
      run: |
        cd frontend
        npm install -g pnpm
        pnpm install
        pnpm build
        echo "‚úÖ Frontend build successful"
        
    - name: Test backend setup
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then
          pip install -r backend/requirements.txt
        fi
        echo "‚úÖ Backend setup successful"

  pr-summary:
    needs: [code-quality, security-scan, build-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: PR Check Summary
      run: |
        echo "üìã Pull Request Check Summary"
        echo "============================"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build Test: ${{ needs.build-test.result }}"
        echo "============================"
        
        if [ "${{ needs.code-quality.result }}" == "success" ] && 
           [ "${{ needs.security-scan.result }}" == "success" ] && 
           [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "‚úÖ All checks passed! Ready for review."
        else
          echo "‚ùå Some checks failed. Please review and fix issues."
        fi

