name: Frontend Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'frontend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'frontend/**' ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  S3_BUCKET_PROD: app.qryti.com
  S3_BUCKET_STAGING: qrytiv2-staging
  CLOUDFRONT_DISTRIBUTION_ID: E2HCV8NIH27XPX

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: |
        cd frontend
        pnpm install
        
    - name: Run tests
      run: |
        cd frontend
        # Add test command when tests are available
        # pnpm test
        echo "Tests would run here"
        
    - name: Build application
      run: |
        cd frontend
        pnpm build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to staging S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ env.S3_BUCKET_STAGING }}/ --delete
        
    - name: Get staging URL
      run: |
        echo "üöÄ Staging deployment complete!"
        echo "üì± Preview URL: http://${{ env.S3_BUCKET_STAGING }}.s3-website.${{ env.AWS_REGION }}.amazonaws.com"

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to production S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ env.S3_BUCKET_PROD }}/ --delete
        
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
          
    - name: Deployment success notification
      run: |
        echo "üéâ Production deployment successful!"
        echo "üåê Live URL: https://app.qryti.com"
        echo "‚è∞ Deployment time: $(date)"
        
    - name: Health check
      run: |
        sleep 30  # Wait for CloudFront invalidation
        response=$(curl -s -o /dev/null -w "%{http_code}" https://app.qryti.com)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Health check passed (HTTP $response)"
        else
          echo "‚ùå Health check failed (HTTP $response)"
          exit 1
        fi

  notify-deployment:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Frontend deployment completed successfully"
          echo "üöÄ Qrytiv2 is live at https://app.qryti.com"
        else
          echo "‚ùå Frontend deployment failed"
          echo "üîç Check the logs for details"
        fi

