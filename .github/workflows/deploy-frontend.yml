name: Deploy Frontend

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend-optimized/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend-optimized/**'

  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: './frontend-optimized'

jobs:
  # Build and test frontend
  build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run tests (if available)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if npm run test --if-present; then
            echo "Tests passed"
          else
            echo "No tests found or tests failed"
          fi

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          NODE_ENV: production
        run: npm run build

      - name: Analyze bundle size
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "üìä Bundle Analysis:"
          du -sh dist/
          echo "üìÅ Detailed breakdown:"
          find dist/ -name "*.js" -o -name "*.css" | xargs ls -lh
          echo "üóúÔ∏è Gzipped sizes:"
          find dist/ -name "*.js" -o -name "*.css" | xargs gzip -c | wc -c | awk '{print $1/1024 " KB (gzipped)"}'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ${{ env.WORKING_DIRECTORY }}/dist/
          retention-days: 30

  # Deploy to development environment
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy to S3 (Development)
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_DEV }} --delete --cache-control "max-age=86400"

      - name: Invalidate CloudFront (Development)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_DEV }} \
            --paths "/*"

      - name: Deployment summary
        run: |
          echo "‚úÖ Development deployment completed!"
          echo "üîó URL: https://${{ secrets.S3_BUCKET_DEV }}"
          echo "üìÖ Deployed at: $(date)"

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy to S3 (Staging)
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_STAGING }} --delete --cache-control "max-age=3600"

      - name: Invalidate CloudFront (Staging)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} \
            --paths "/*"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add smoke tests here
          curl -f https://${{ secrets.S3_BUCKET_STAGING }} || echo "Smoke test failed"

      - name: Deployment summary
        run: |
          echo "‚úÖ Staging deployment completed!"
          echo "üîó URL: https://${{ secrets.S3_BUCKET_STAGING }}"
          echo "üìÖ Deployed at: $(date)"

  # Deploy to production environment (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-south-1

      - name: Backup current production (optional)
        run: |
          echo "üì¶ Creating backup of current production..."
          aws s3 sync s3://${{ secrets.S3_BUCKET_PROD }} s3://${{ secrets.S3_BUCKET_PROD }}-backup-$(date +%Y%m%d-%H%M%S) || echo "Backup failed or bucket empty"

      - name: Deploy to S3 (Production)
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_PROD }} --delete --cache-control "max-age=31536000"

      - name: Invalidate CloudFront (Production)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/*"

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."
          sleep 30  # Wait for CloudFront invalidation
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }} || echo "Health check failed"

      - name: Deployment summary
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üîó URL: https://${{ secrets.PRODUCTION_DOMAIN }}"
          echo "üìÖ Deployed at: $(date)"
          echo "üöÄ Application is now live!"

  # Performance monitoring
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse audit
        run: |
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse audit completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Performance summary
        run: |
          echo "üìä Performance audit completed"
          echo "Check the Lighthouse report for detailed metrics"

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run security audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"

      - name: Check for vulnerable dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npx audit-ci --moderate || echo "Dependency check completed"

      - name: Security summary
        run: |
          echo "üîí Security scan completed"
          echo "Review any security warnings above"

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-south-1

      - name: List available backups
        run: |
          echo "üìã Available backups:"
          aws s3 ls s3:// | grep ${{ secrets.S3_BUCKET_PROD }}-backup

      - name: Rollback to previous version
        run: |
          echo "‚è™ Rolling back to previous version..."
          # This would need to be implemented based on your backup strategy
          echo "Manual rollback required - check backup buckets"

      - name: Rollback summary
        run: |
          echo "‚è™ Rollback process initiated"
          echo "Please verify the application is working correctly"

