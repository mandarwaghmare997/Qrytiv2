import React, { useState, useEffect } from 'react';
import './ComplianceReports.css';

const ComplianceReports = ({ onBack }) => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedReport, setSelectedReport] = useState(null);
  const [generatingPDF, setGeneratingPDF] = useState(false);

  // Demo compliance reports data
  const demoReports = [
    {
      id: 1,
      title: 'ISO 42001 Compliance Assessment Report',
      type: 'Assessment',
      date: '2024-01-15',
      status: 'Completed',
      score: 85,
      riskLevel: 'Medium',
      categories: [
        { name: 'AI Policy (A.2)', score: 90, status: 'Compliant' },
        { name: 'AI Roles & Responsibilities (A.3)', score: 85, status: 'Compliant' },
        { name: 'Resource Management (A.4)', score: 80, status: 'Needs Improvement' },
        { name: 'Impact Assessment (A.5)', score: 88, status: 'Compliant' },
        { name: 'Development & Deployment (A.6)', score: 82, status: 'Compliant' }
      ]
    },
    {
      id: 2,
      title: 'Monthly Compliance Review',
      type: 'Review',
      date: '2024-01-01',
      status: 'Completed',
      score: 78,
      riskLevel: 'Medium',
      categories: [
        { name: 'AI Policy (A.2)', score: 85, status: 'Compliant' },
        { name: 'AI Roles & Responsibilities (A.3)', score: 75, status: 'Needs Improvement' },
        { name: 'Resource Management (A.4)', score: 70, status: 'Needs Improvement' },
        { name: 'Impact Assessment (A.5)', score: 80, status: 'Compliant' },
        { name: 'Development & Deployment (A.6)', score: 80, status: 'Compliant' }
      ]
    },
    {
      id: 3,
      title: 'AI Risk Assessment Report',
      type: 'Risk Assessment',
      date: '2023-12-15',
      status: 'Completed',
      score: 92,
      riskLevel: 'Low',
      categories: [
        { name: 'AI Policy (A.2)', score: 95, status: 'Compliant' },
        { name: 'AI Roles & Responsibilities (A.3)', score: 90, status: 'Compliant' },
        { name: 'Resource Management (A.4)', score: 88, status: 'Compliant' },
        { name: 'Impact Assessment (A.5)', score: 95, status: 'Compliant' },
        { name: 'Development & Deployment (A.6)', score: 92, status: 'Compliant' }
      ]
    }
  ];

  useEffect(() => {
    setLoading(true);
    // Simulate API call
    setTimeout(() => {
      setReports(demoReports);
      setLoading(false);
    }, 1000);
  }, []);

  const handleGeneratePDF = async (report) => {
    setGeneratingPDF(true);
    
    // Simulate PDF generation
    setTimeout(() => {
      // Create a simple PDF-like content
      const pdfContent = generatePDFContent(report);
      downloadPDF(pdfContent, `${report.title.replace(/\s+/g, '_')}.pdf`);
      setGeneratingPDF(false);
    }, 2000);
  };

  const generatePDFContent = (report) => {
    return `
ISO 42001 AI Governance Platform
Compliance Report

Report Title: ${report.title}
Report Type: ${report.type}
Generated Date: ${new Date().toLocaleDateString()}
Assessment Date: ${report.date}

EXECUTIVE SUMMARY
Overall Compliance Score: ${report.score}%
Risk Level: ${report.riskLevel}
Status: ${report.status}

DETAILED ASSESSMENT

${report.categories.map(category => `
${category.name}
Score: ${category.score}%
Status: ${category.status}
`).join('\n')}

RECOMMENDATIONS
${report.score < 80 ? 
  '- Focus on improving categories with scores below 80%\n- Implement additional controls for risk mitigation\n- Schedule follow-up assessment in 3 months' :
  '- Maintain current compliance levels\n- Continue monitoring and regular assessments\n- Consider advanced optimization opportunities'
}

COMPLIANCE MATRIX
${report.categories.map(category => 
  `${category.name}: ${category.score >= 80 ? '‚úì' : '‚úó'} ${category.status}`
).join('\n')}

This report was generated by the Qryti ISO 42001 AI Governance Platform.
For questions or support, contact: support@qryti.com
    `;
  };

  const downloadPDF = (content, filename) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const getScoreColor = (score) => {
    if (score >= 90) return '#10b981'; // Green
    if (score >= 80) return '#f59e0b'; // Yellow
    if (score >= 70) return '#f97316'; // Orange
    return '#ef4444'; // Red
  };

  const getRiskLevelColor = (riskLevel) => {
    switch (riskLevel.toLowerCase()) {
      case 'low': return '#10b981';
      case 'medium': return '#f59e0b';
      case 'high': return '#ef4444';
      default: return '#6b7280';
    }
  };

  if (loading) {
    return (
      <div className="compliance-reports">
        <div className="reports-header">
          <button className="back-btn" onClick={onBack}>
            ‚Üê Back to Dashboard
          </button>
          <h2>Compliance Reports</h2>
        </div>
        <div className="loading-state">
          <div className="loading-spinner">Loading reports...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="compliance-reports">
      <div className="reports-header">
        <button className="back-btn" onClick={onBack}>
          ‚Üê Back to Dashboard
        </button>
        <div className="header-content">
          <h2>Compliance Reports</h2>
          <p>Generate and download ISO 42001 compliance reports</p>
        </div>
        <button className="generate-new-btn">
          + Generate New Report
        </button>
      </div>

      <div className="reports-grid">
        {reports.map(report => (
          <div key={report.id} className="report-card">
            <div className="report-header">
              <div className="report-info">
                <h3>{report.title}</h3>
                <div className="report-meta">
                  <span className="report-type">{report.type}</span>
                  <span className="report-date">{new Date(report.date).toLocaleDateString()}</span>
                </div>
              </div>
              <div className="report-status">
                <span className={`status-badge ${report.status.toLowerCase().replace(' ', '-')}`}>
                  {report.status}
                </span>
              </div>
            </div>

            <div className="report-metrics">
              <div className="metric">
                <div className="metric-label">Overall Score</div>
                <div 
                  className="metric-value score"
                  style={{ color: getScoreColor(report.score) }}
                >
                  {report.score}%
                </div>
              </div>
              <div className="metric">
                <div className="metric-label">Risk Level</div>
                <div 
                  className="metric-value risk"
                  style={{ color: getRiskLevelColor(report.riskLevel) }}
                >
                  {report.riskLevel}
                </div>
              </div>
            </div>

            <div className="report-categories">
              <div className="categories-header">Assessment Categories</div>
              <div className="categories-list">
                {report.categories.map((category, index) => (
                  <div key={index} className="category-item">
                    <span className="category-name">{category.name}</span>
                    <div className="category-score">
                      <span style={{ color: getScoreColor(category.score) }}>
                        {category.score}%
                      </span>
                      <span className={`category-status ${category.status.toLowerCase().replace(' ', '-')}`}>
                        {category.status}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="report-actions">
              <button 
                className="view-btn"
                onClick={() => setSelectedReport(report)}
              >
                üìä View Details
              </button>
              <button 
                className="download-btn"
                onClick={() => handleGeneratePDF(report)}
                disabled={generatingPDF}
              >
                {generatingPDF ? '‚è≥ Generating...' : 'üìÑ Download PDF'}
              </button>
            </div>
          </div>
        ))}
      </div>

      {selectedReport && (
        <div className="report-modal-overlay" onClick={() => setSelectedReport(null)}>
          <div className="report-modal" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{selectedReport.title}</h3>
              <button 
                className="close-btn"
                onClick={() => setSelectedReport(null)}
              >
                √ó
              </button>
            </div>
            <div className="modal-content">
              <div className="report-summary">
                <div className="summary-grid">
                  <div className="summary-item">
                    <label>Report Type</label>
                    <span>{selectedReport.type}</span>
                  </div>
                  <div className="summary-item">
                    <label>Assessment Date</label>
                    <span>{new Date(selectedReport.date).toLocaleDateString()}</span>
                  </div>
                  <div className="summary-item">
                    <label>Overall Score</label>
                    <span style={{ color: getScoreColor(selectedReport.score) }}>
                      {selectedReport.score}%
                    </span>
                  </div>
                  <div className="summary-item">
                    <label>Risk Level</label>
                    <span style={{ color: getRiskLevelColor(selectedReport.riskLevel) }}>
                      {selectedReport.riskLevel}
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="detailed-categories">
                <h4>Detailed Assessment Results</h4>
                {selectedReport.categories.map((category, index) => (
                  <div key={index} className="detailed-category">
                    <div className="category-header">
                      <span className="category-title">{category.name}</span>
                      <span 
                        className="category-score-large"
                        style={{ color: getScoreColor(category.score) }}
                      >
                        {category.score}%
                      </span>
                    </div>
                    <div className="category-progress">
                      <div 
                        className="progress-bar"
                        style={{ 
                          width: `${category.score}%`,
                          backgroundColor: getScoreColor(category.score)
                        }}
                      ></div>
                    </div>
                    <div className="category-status-detail">
                      Status: <span className={`status ${category.status.toLowerCase().replace(' ', '-')}`}>
                        {category.status}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="modal-actions">
              <button 
                className="download-pdf-btn"
                onClick={() => handleGeneratePDF(selectedReport)}
                disabled={generatingPDF}
              >
                {generatingPDF ? '‚è≥ Generating PDF...' : 'üìÑ Download PDF Report'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ComplianceReports;

